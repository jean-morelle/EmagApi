@page "/GetAllProfessors"
@using EmagApi.Core.ServicesProvider.Interfaces
@using EmagApi.Domain.Models

<div class="container my-4">
    <div class="row">
        <div class="col-12 text-end mb-4">
            <button class="btn btn-success" @onclick="AddNewProfessor">Ajouter un Professeur</button>
        </div>

        <div class="col-12">
            @if (AllProfesseurs == null)
            {
                <p><em>Chargement des professeurs...</em></p>
            }
            else if (!AllProfesseurs.Any())
            {
                <div class="alert alert-info">Il n'y a pas encore de professeurs enregistrés.</div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5>Liste des Professeurs</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Genre</th>
                                    <th>Nom</th>
                                    <th>Prénom</th>
                                    <th>Date de naissance</th>
                                    <th>Adresse</th>
                                    <th>Numéro de Téléphone</th>
                                    <th>Diplôme</th>
                                    <th class="text-end">Modifier</th> 
                                    <th class="text-end">Supprimer</th> 
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var professeur in PaginatedProfesseurs)
                                {
                                    <tr>
                                        <td>@professeur.Sexe</td>
                                        <td>@professeur.Nom</td>
                                        <td>@professeur.Prenom</td>
                                        <td>@professeur.DateDeNaissance.ToShortDateString()</td>
                                        <td>@professeur.Adresse</td>
                                        <td>@professeur.Telephone</td>
                                        <td>@professeur.DernierDiplome</td>
                                        <td class="text-end">
                                            <button class="btn btn-warning" @onclick="() => EditProfessor(professeur.Id)">
                                                Modifier
                                            </button>
                                        </td>
                                        <td class="text-end">
                                            <button class="btn btn-danger" @onclick="() => DeleteProfessor(professeur.Id)">
                                                Supprimer
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(CurrentPage == 1)">Précédent</button>
                            <span>Page @CurrentPage sur @TotalPages</span>
                            <button class="btn btn-primary" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">Suivant</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    public List<Professeur> AllProfesseurs { get; set; } = new();
    private List<Professeur> PaginatedProfesseurs => AllProfesseurs.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 1;
    private int TotalPages => (int)Math.Ceiling((double)AllProfesseurs.Count / PageSize);

    [Inject]
    public IProfesseurServices professeurService { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    [Inject]
    private NavigationManager? navigationManager { get; set; }

    private void AddNewProfessor()
    {
        navigationManager?.NavigateTo("/AddNewProfesseur");
    }

    private void EditProfessor(int id)
    {
        navigationManager?.NavigateTo($"/UpdateProfessor/{id}");
    }

    private async Task DeleteProfessor(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Voulez-vous vraiment supprimer ce professeur ?");
        if (confirmed)
        {
            await professeurService.DeleteProfesseurAsync(id);
            await LoadProfessors();
        }
    }

    private async Task LoadProfessors()
    {
        if (professeurService is not null)
        {
            AllProfesseurs = await professeurService.GetAllProfesseursAsync();
            CurrentPage = 1;
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProfessors();
    }
}
