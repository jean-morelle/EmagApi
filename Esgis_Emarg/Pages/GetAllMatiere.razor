@page "/GetAllMatiere"
@using EmagApi.Core.ServicesProvider.Interfaces
@using EmagApi.Domain.Models

<div class="container my-4">
    <div class="row">
        <div class="col-12 text-end mb-4">
            <button class="btn btn-success" @onclick="AddNewMatiere">Ajouter une Matière</button>
        </div>

        <div class="col-12">
            @if (AllMatiere == null)
            {
                <p><em>Chargement des matières...</em></p>
            }
            else if (!AllMatiere.Any())
            {
                <div class="alert alert-info">Il n'y a pas encore de matières enregistrées.</div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5>Liste des Matières</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Nom</th>
                                    <th class="text-end">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var matiere in PaginatedMatiere)
                                {
                                    <tr>
                                        <td>@matiere.Nom</td>
                                        <td class="text-end">
                                            <button class="btn btn-warning" @onclick="() => EditMatiere(matiere.Id)">
                                                Modifier
                                            </button>
                                            <button class="btn btn-danger" @onclick="() => DeleteMatiere(matiere.Id)">
                                                Supprimer
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(CurrentPage == 1 || !AllMatiere.Any())">Précédent</button>
                            <span>Page @CurrentPage sur @TotalPages</span>
                            <button class="btn btn-primary" @onclick="NextPage" disabled="@(CurrentPage == TotalPages || !AllMatiere.Any())">Suivant</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    public List<Matiere> AllMatiere { get; set; } = new();
    private List<Matiere> PaginatedMatiere => AllMatiere.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages => (int)Math.Ceiling((double)AllMatiere.Count / PageSize);

    [Inject]
    public IMatiereServices matiereServices { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    [Inject]
    private NavigationManager? navigationManager { get; set; }

    private void AddNewMatiere()
    {
        navigationManager?.NavigateTo("/AddNewMatiere");
    }

    private void EditMatiere(int id)
    {
        navigationManager?.NavigateTo($"/UpdateMatiere/{id}");
    }

    private async Task DeleteMatiere(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Voulez-vous vraiment supprimer cette matière ?");
        if (confirmed)
        {
            try
            {
                await matiereServices.DeleteMatiereAsync(id);
                await LoadMatiere();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Erreur lors de la suppression : {ex.Message}");
            }
        }
    }

    private async Task LoadMatiere()
    {
        try
        {
            if (matiereServices != null)
            {
                AllMatiere = await matiereServices.GetAllMatieresAsync();
                CurrentPage = 1;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors du chargement des matières : {ex.Message}");
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMatiere();
    }
}
