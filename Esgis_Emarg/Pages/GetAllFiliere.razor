@page "/GetAllFiliere"
@using EmagApi.Core.ServicesProvider.Interfaces
@using EmagApi.Domain.Models

<div class="container my-4">
    <div class="row">
        <div class="col-12 text-end mb-4">
            <button class="btn btn-success" @onclick="AddNewFiliere">Ajouter une Filière</button>
        </div>

        <div class="col-12">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            @if (AllFiliere == null)
            {
                <p><em>Chargement des matières...</em></p>
            }
            else if (!AllFiliere.Any())
            {
                <div class="alert alert-info">Il n'y a pas encore de filières enregistrées.</div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5>Liste des Filières</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Nom</th>
                                    <th class="text-end">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var filiere in PaginatedFiliere)
                                {
                                    <tr>
                                        <td>@filiere.Nom</td>
                                        <td class="text-end">
                                            <button class="btn btn-warning" @onclick="() => EditFiliere(filiere.Id)">
                                                Modifier
                                            </button>
                                            <button class="btn btn-danger" @onclick="() => DeleteFiliere(filiere.Id)">
                                                Supprimer
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Précédent</button>
                            <span>Page @CurrentPage sur @TotalPages</span>
                            <button class="btn btn-primary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Suivant</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    public List<Filiere> AllFiliere { get; set; } = new();
    private List<Filiere> PaginatedFiliere { get; set; } = new();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private string? ErrorMessage { get; set; }
    private int TotalPages => (int)Math.Ceiling((double)AllFiliere.Count / PageSize);
    private bool CanGoToNextPage => CurrentPage < TotalPages;
    private bool CanGoToPreviousPage => CurrentPage > 1;

    [Inject]
    public IFiliereServices? filiereServices { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    [Inject]
    private NavigationManager? navigationManager { get; set; }

    private void AddNewFiliere()
    {
        navigationManager?.NavigateTo("/AddNewFiliere");
    }

    private void EditFiliere(int id)
    {
        navigationManager?.NavigateTo($"/UpdateFiliere/{id}");
    }

    private async Task DeleteFiliere(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Voulez-vous vraiment supprimer cette filière ?");
        if (confirmed)
        {
            try
            {
                await filiereServices.DeleteFiliereAsync(id);
                AllFiliere.RemoveAll(f => f.Id == id);
                if (CurrentPage > TotalPages) CurrentPage--;
                UpdatePagination();
            }
            catch (Exception ex)
            {
                ErrorMessage = "Erreur lors de la suppression : " + ex.Message;
            }
        }
    }

    private async Task LoadFiliere()
    {
        try
        {
            AllFiliere = await filiereServices.GetAllFiliereAsync();
            CurrentPage = 1;
            UpdatePagination();
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = "Erreur lors du chargement des filières : " + ex.Message;
        }
    }

    private void UpdatePagination()
    {
        PaginatedFiliere = AllFiliere.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
            UpdatePagination();
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
            UpdatePagination();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFiliere();
    }
}
